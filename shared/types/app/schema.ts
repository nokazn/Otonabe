/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/auth': {
    get: {
      parameters: {
        cookie: {
          /** Session ID */
          'connect.sid'?: components['parameters']['SessionId'];
        };
      };
      responses: {
        200: {
          content: {
            'application/json': components['schemas']['Status'] &
              (
                | (components['schemas']['AccessToken'] & {
                    authenticated: true;
                  })
                | (components['schemas']['EmptyAccessToken'] & {
                    authenticated: false;
                  })
              );
          };
        };
      };
    };
  };
  '/auth/login': {
    post: {
      parameters: {
        cookie: {
          /** Session ID */
          'connect.sid'?: components['parameters']['SessionId'];
        };
      };
      responses: {
        200: {
          content: {
            'application/json': components['schemas']['Status'] &
              (
                | (components['schemas']['AccessToken'] & {
                    authenticated: true;
                    url: null;
                  })
                | (components['schemas']['EmptyAccessToken'] & {
                    authenticated: false;
                    url: string | null;
                  })
              );
          };
        };
      };
    };
  };
  '/auth/login/callback': {
    get: {
      parameters: {
        cookie: {
          /** CSRF token for checking 'state' that Spotify's auth server returns in query parameters. */
          csrfState: string;
        };
        query: {
          /** Authorization code */
          code: string;
          /** CSRF state */
          state: string;
        };
      };
      responses: {
        /** Obtain an access token successfully. */
        200: {
          content: {
            'application/json': components['schemas']['Status'] &
              components['schemas']['AccessToken'];
          };
        };
        /** Fail to obtain an access token mainly caused by incorrect code or state in query parameters. */
        400: {
          content: {
            'application/json': components['schemas']['Status'] &
              components['schemas']['EmptyAccessToken'];
          };
        };
        /** Fail to obtain an access token especially caused by not matching between state in cookie and in query parameters. */
        403: {
          content: {
            'application/json': components['schemas']['Status'] &
              components['schemas']['EmptyAccessToken'];
          };
        };
        /** Internal server error */
        500: {
          content: {
            'application/json': components['schemas']['Status'] &
              components['schemas']['EmptyAccessToken'];
          };
        };
      };
    };
  };
  '/auth/refresh': {
    put: {
      parameters: {
        cookie: {
          /** Session ID */
          'connect.sid'?: components['parameters']['SessionId'];
        };
      };
      responses: {
        /** Update an access token successfully. */
        200: {
          content: {
            'application/json': components['schemas']['Status'] &
              components['schemas']['AccessToken'];
          };
        };
        /** Failure mainly caused by invalid request body. */
        400: {
          content: {
            'application/json': components['schemas']['Status'] &
              components['schemas']['EmptyAccessToken'];
          };
        };
        /** Failure mainly caused by no refresh token in session or no correspond access_token_key in session. */
        403: {
          content: {
            'application/json': components['schemas']['Status'] &
              components['schemas']['EmptyAccessToken'];
          };
        };
        /** Failure mainly caused by conflicting on refreshing. */
        409: {
          content: {
            'application/json': components['schemas']['Status'] &
              components['schemas']['EmptyAccessToken'];
          };
        };
        /** Internal server error */
        500: {
          content: {
            'application/json': components['schemas']['Status'] &
              components['schemas']['EmptyAccessToken'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': {
            accessToken: string;
            authState: string;
          };
        };
      };
    };
  };
  '/auth/logout': {
    post: {
      parameters: {
        cookie: {
          /** Session ID */
          'connect.sid'?: components['parameters']['SessionId'];
        };
      };
      responses: {
        /** Log out successfully. */
        204: never;
        /** Internal server error */
        500: {
          content: {
            'application/json': components['schemas']['Status'];
          };
        };
      };
    };
  };
}

export interface components {
  schemas: {
    Status: {
      code: string;
      message: string;
    };
    AccessToken: {
      authState: string;
      accessToken: string;
      expireIn: number;
    };
    EmptyAccessToken: {
      authState: string | null;
      accessToken: null;
      expireIn: 0;
    };
  };
  parameters: {
    /** Session ID */
    SessionId: string;
  };
}

export interface operations {}
